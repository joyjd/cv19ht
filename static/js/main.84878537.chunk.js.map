{"version":3,"sources":["Modals/WelcomeModal/WelcomeModal.component.jsx","BootBase.js","serviceWorker.js","redux/selectedHospital/selectedHospital.reducer.js","redux/totalHospitalDetails/totalHospital.reducer.js","redux/userAddress/addressComponents.reducer.js","redux/userAddress/formattedAddress.reducer.js","redux/userAddress/locationTags.reducer.js","redux/userAddress/userCords.reducer.js","redux/selectedHospital/selectedHospitalZoneTags.reducer.js","redux/totalHospitalDetails/rawHospitalData.reducer.js","redux/search/search.reducer.js","redux/locationInput/locationInput.reducer.js","redux/userAddress/cordChangeFlag.reducer.js","redux/userAddress/commuteFlag.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["WelcomeModal","props","id","Dialog","fullWidth","open","style","backgroundColor","color","PaperProps","borderRadius","top","onClose","handleAlertClose","aria-labelledby","aria-describedby","DialogContent","paddingLeft","paddingRight","className","DialogActions","Button","onClick","variant","App","lazy","Bootbase","handleCloseWelcomeAlert","el","setState","showLocation","openWelcomeAlert","state","enableAppModule","this","fallback","React","Component","Boolean","window","location","hostname","match","INITIAL_STATE","selectedHospital","selectedHospitalReducer","action","type","Object","assign","payload","totalHospitalDetails","totalHospitalDetailReducer","addressComponents","addressComponentsReducer","formattedAddress","formattedAddressReducer","locationTags","locationTagsReducer","userCords","userCordsReducer","selectedHospitalZoneTags","selectedHospitalZoneTagsReducer","rawHospitalData","rawHospitalDataReducer","searchText","searchReducer","locationModalOpen","locationInputReducer","cordChangeFlag","cordChangeFlagReducer","commuteFlag","commuteFlagReducer","combineReducers","selectedHospitalList","locationModal","userCordChangeFlag","commmuteFlag","middlewares","logger","store","createStore","rootReducer","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.84878537.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./../WelcomeModal/WelcomeModal.style.scss\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default function WelcomeModal(props) {\r\n  return (\r\n    <div id='welcomeDialogue'>\r\n      <Dialog\r\n        fullWidth={true}\r\n        open={props.open}\r\n        style={{\r\n          backgroundColor: \"#5264ca\",\r\n          color: \"white\",\r\n        }}\r\n        PaperProps={{\r\n          style: {\r\n            borderRadius: \"5px\",\r\n            top: \"30px\",\r\n          },\r\n        }}\r\n        onClose={props.handleAlertClose}\r\n        aria-labelledby='alert-dialog-title'\r\n        aria-describedby='alert-dialog-description'\r\n      >\r\n        <DialogContent style={{ backgroundColor: \"#3b87ff\", paddingLeft: \"5px\", paddingRight: \"5px\" }} id='welcomeContent'>\r\n          <div className='headerImageContainer'>\r\n            <div className='headerImageHolder'></div>\r\n            <div className='animatorTest'>\r\n              <div className='headerImageFiller'>\r\n                <div className='headerImageFillerInner'></div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className='welcomeNote'> Hello !</div>\r\n          </div>\r\n          <div className='welcomeContent'>\r\n            <div className='welcomeBodyContent'>\r\n              <div className='div_0'>\r\n                <strong>Lets Stand Strong Together. </strong>\r\n              </div>\r\n              <div className='div_1'>\r\n                <strong>\r\n                  <span className='NameHolder'>COVID19 HospitalTracker</span>\r\n                </strong>\r\n                is a mobile-friendly web app designed specifically to help you tackle the tough times of COVID19.\r\n                <br />\r\n                <br />\r\n                This web-app helps you in tracking hospitals providing care for COVID19 patients based on your location.\r\n              </div>\r\n              <br />\r\n              <div className='div_2'> To aid you in the best way,enable permission to access your device location when asked next.</div>\r\n              Stay safe.\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n        <DialogActions style={{ backgroundColor: \"#3b87ff\" }}>\r\n          <div className='btn_Container'>\r\n            <Button onClick={() => props.onClose(true)} color='primary' variant='contained'>\r\n              Proceed\r\n            </Button>\r\n          </div>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport WelcomeModal from \"./Modals/WelcomeModal/WelcomeModal.component\";\r\n//import App from \"./App\";\r\n\r\nconst App = lazy(() => import(\"./App\"));\r\nconst renderLoader = () => <p>Loading</p>;\r\n\r\nclass Bootbase extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      openWelcomeAlert: false,\r\n      enableAppModule: false,\r\n      showLocation: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      enableAppModule: true,\r\n      openWelcomeAlert: true,\r\n    });\r\n  }\r\n\r\n  handleCloseWelcomeAlert = (el) => {\r\n    this.setState({\r\n      showLocation: true,\r\n      openWelcomeAlert: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Suspense fallback={renderLoader()}>{this.state.enableAppModule ? <App showLocation={this.state.showLocation} /> : null}</Suspense>\r\n        <WelcomeModal open={this.state.openWelcomeAlert} onClose={(el) => this.handleCloseWelcomeAlert(el)} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Bootbase;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service \" + \"worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker === null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\"New content is available and will be used when all \" + \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType !== null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {\r\n  selectedHospital: null,\r\n};\r\n\r\nconst selectedHospitalReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SELECTED_HOSPITAL_LIST\": {\r\n      return {\r\n        ...state,\r\n        selectedHospital: Object.assign([], action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default selectedHospitalReducer;\r\n","const INITIAL_STATE = {\r\n  totalHospitalDetails: null,\r\n};\r\n\r\nconst totalHospitalDetailReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_TOTAL_HOSPITAL_DETAIL\": {\r\n      return {\r\n        ...state,\r\n        totalHospitalDetails: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default totalHospitalDetailReducer;\r\n","const INITIAL_STATE = {\r\n  addressComponents: null,\r\n};\r\n\r\nconst addressComponentsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_ADDRESS_COMPONENTS\": {\r\n      return {\r\n        ...state,\r\n        addressComponents: Object.assign([], action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default addressComponentsReducer;\r\n","const INITIAL_STATE = {\r\n  formattedAddress: null,\r\n};\r\n\r\nconst formattedAddressReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_FORMATTED_ADDRESS\": {\r\n      return {\r\n        ...state,\r\n        formattedAddress: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default formattedAddressReducer;\r\n","const INITIAL_STATE = {\r\n  locationTags: null,\r\n};\r\n\r\nconst locationTagsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_LOCATION_TAGS\": {\r\n      return {\r\n        ...state,\r\n        locationTags: Object.assign([], action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default locationTagsReducer;\r\n","const INITIAL_STATE = {\r\n  userCords: null,\r\n};\r\n\r\nconst userCordsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_USER_CORDS\": {\r\n      return {\r\n        ...state,\r\n        userCords: Object.assign([], action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userCordsReducer;\r\n","const INITIAL_STATE = {\r\n  selectedHospitalZoneTags: null,\r\n};\r\n\r\nconst selectedHospitalZoneTagsReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SELECTED_HOSPITAL_ZONE_TAGS\": {\r\n      return {\r\n        ...state,\r\n        selectedHospitalZoneTags: Object.assign([], action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default selectedHospitalZoneTagsReducer;\r\n","const INITIAL_STATE = {\r\n  rawHospitalData: null,\r\n};\r\n\r\nconst rawHospitalDataReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_RAW_HOSPITAL_DATA\": {\r\n      return {\r\n        ...state,\r\n        rawHospitalData: Object.assign({}, action.payload),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default rawHospitalDataReducer;\r\n","const INITIAL_STATE = {\r\n  searchText: null,\r\n};\r\n\r\nconst searchReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SEARCH_TEXT\": {\r\n      return {\r\n        ...state,\r\n        searchText: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default searchReducer;\r\n","const INITIAL_STATE = {\r\n  locationModalOpen: false,\r\n};\r\n\r\nconst locationInputReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_LOCATION_MODAL\": {\r\n      return {\r\n        ...state,\r\n        locationModalOpen: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default locationInputReducer;\r\n","const INITIAL_STATE = {\r\n  cordChangeFlag: null,\r\n};\r\n\r\nconst cordChangeFlagReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_CORD_CHANGE\": {\r\n      return {\r\n        ...state,\r\n        cordChangeFlag: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default cordChangeFlagReducer;\r\n","const INITIAL_STATE = {\r\n  commuteFlag: false,\r\n};\r\n\r\nconst commuteFlagReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case \"SET_COMMUTE_FLAG\": {\r\n      return {\r\n        ...state,\r\n        commuteFlag: action.payload,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default commuteFlagReducer;\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport selectedHospitalReducer from \"./selectedHospital/selectedHospital.reducer\";\r\nimport totalHospitalDetailReducer from \"./totalHospitalDetails/totalHospital.reducer\";\r\nimport addressComponentsReducer from \"./userAddress/addressComponents.reducer\";\r\nimport formattedAddressReducer from \"./userAddress/formattedAddress.reducer\";\r\nimport locationTagsReducer from \"./userAddress/locationTags.reducer\";\r\nimport userCordsReducer from \"./userAddress/userCords.reducer\";\r\nimport selectedHospitalZoneTagsReducer from \"./selectedHospital/selectedHospitalZoneTags.reducer\";\r\nimport rawHospitalDataReducer from \"./totalHospitalDetails/rawHospitalData.reducer\";\r\nimport searchReducer from \"./search/search.reducer\";\r\nimport locationInputReducer from \"./locationInput/locationInput.reducer\";\r\nimport cordChangeFlagReducer from \"./userAddress/cordChangeFlag.reducer\";\r\nimport commuteFlagReducer from \"./userAddress/commuteFlag.reducer\";\r\n\r\nexport default combineReducers({\r\n  selectedHospitalList: selectedHospitalReducer,\r\n  totalHospitalDetails: totalHospitalDetailReducer,\r\n  addressComponents: addressComponentsReducer,\r\n  formattedAddress: formattedAddressReducer,\r\n  locationTags: locationTagsReducer,\r\n  userCords: userCordsReducer,\r\n  selectedHospitalZoneTags: selectedHospitalZoneTagsReducer,\r\n  rawHospitalData: rawHospitalDataReducer,\r\n  searchText: searchReducer,\r\n  locationModal: locationInputReducer,\r\n  userCordChangeFlag: cordChangeFlagReducer,\r\n  commmuteFlag: commuteFlagReducer,\r\n});\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport logger from \"redux-logger\";\r\n\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst middlewares = [logger];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n//import App from \"./App\";\nimport Bootbase from \"./BootBase\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <App /> */}\n      <Bootbase />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}